import streamlit as st
import numpy as np
import joblib
import pickle

# –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ü–µ–Ω–∫–∏
MARKS: tuple[str, str, str, str, str] = ('5', '4', '3', '2', '1')


class Comment:
    """ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π """

    def __init__(
            self,
            status: int,
             text: str,
            author_name: str
    ) -> None:
        # –¢–∏–ø –æ—Ü–µ–Ω–∫–∏: –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è –∏–ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è
        self.status: int = status
        # –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        if text:
            self.text: str = text
        else:
            self.text: str = '–ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤'
        # –ò–º—è –∞–≤—Ç–æ—Ä–∞
        if author_name:
            self.author_name: str = author_name
        else:
            self.author_name: str = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'


def write_comment(comment: Comment) -> None:
    """ –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –æ—Ü–µ–Ω–∫–æ–π
    –æ—Ç–∑—ã–≤–∞

    """
    # –í—ã–±–∏—Ä–∞–µ–º –æ—Ü–µ–Ω–∫—É –æ—Ç–∑—ã–≤–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
    if comment.status:
        status: str = 'üü© ***–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤:***'
    else:
        status: str = 'üü• ***–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤:***'

    # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    st.write(f'### {status} üë§ *{comment.author_name}*')
    st.write(f'‚úàÔ∏è {comment.text}')
    st.write('---')


def predict_status(features: np.ndarray, comment_text: str, author_name: str):
    """ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–µ–π–ª–µ—Ä –∏ –º–æ–¥–µ–ª—å
    scaler = joblib.load('scaler.pkl')
    with open('model.pickle', 'rb') as f:
        model = pickle.load(f)

    # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #write_comment(
    #    Comment(
    #        model.predict(scaler.transform(features)).round().astype(int),
    #        comment_text, author_name
    #    )
    #)


def start() -> None:
    """ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ """
    # –ó–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        layout="wide",
        initial_sidebar_state="auto",
        page_title="ML Airlines",
    )
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    draw_header()
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    draw_sidebar()


def draw_header() -> None:
    """ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ """
    st.write(
        '''
        # üõ∏ ***–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ "ML Airlines"***
        ### üñ• –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é - –¥–æ–≤–æ–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç –∞–≤–∏–≤–ø–µ—Ä–µ–ª—ë—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç

        ---

        '''
    )


def draw_sidebar() -> None:
    """ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ """
    st.sidebar.header('–ó–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
    # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = st.sidebar.text_input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

    # –õ–æ—è–ª–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
    user_loyalty: int = int(
        st.sidebar.checkbox('–õ–æ—è–ª—å–Ω—ã –ª–∏ –≤—ã –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?')
    )

    # –¢–∏–ø –ø–æ–µ–∑–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_travel_type: str = st.sidebar.selectbox(
        '–ö–∞–∫–æ–≤ –≤–∞—à —Ç–∏–ø –ø–æ–µ–∑–¥–∫–∏?', ('Business', 'Personal')
    )

    # –ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_service_class: str = st.sidebar.selectbox(
        '–ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', ('Business', 'Eco', 'Eco Plus')
    )

    # –î–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_flight_distance: int = int(st.sidebar.slider(
        '–î–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–æ–ª—ë—Ç–∞ (–≤ –º–∏–ª—è—Ö)', min_value=200,
        max_value=10000, value=200, step=1
    ))

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    inflight_wifi_service: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
    ticket_purchase_quality: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ —É–¥–æ–±—Å—Ç–≤–æ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ—Å–∞–¥–∫–∏ –≤ —Å–∞–º–æ–ª—ë—Ç
    the_quality_of_boarding_the_plane: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ —É–¥–æ–±—Å—Ç–≤–æ –ø–æ—Å–∞–¥–∫–∏ –≤ —Å–∞–º–æ–ª—ë—Ç', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –µ–¥—ã –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤
    the_drink_and_food_quality: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ –Ω–∞ –±–æ—Ä—Ç—É', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–¥–æ–±—Å—Ç–≤–∞ —Å–∏–¥–µ–Ω–∏–π
    seat_quality: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ —É–¥–æ–±—Å—Ç–≤–æ —Å–∏–¥–µ–Ω–∏–π –Ω–∞ –±–æ—Ä—Ç—É', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
    quality_of_entertainment: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑–≤–µ–ª–µ—á–µ–Ω–∏–π', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –±–æ—Ä—Ç—É
    quality_of_service_on_board: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –±–æ—Ä—Ç—É', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–æ–≥–æ, –∫–∞–∫ —É–¥–æ–±–Ω–æ –±—ã–ª–æ –Ω–æ–≥–∞–º
    leg_room_service_quality: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–¥–æ–±–Ω–æ –±—ã–ª–æ –≤–∞—à–∏–º –Ω–æ–≥–∞–º', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –±–∞–≥–∞–∂–æ–º
    baggage_handling_quality: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –±–∞–≥–∞–∂–æ–º', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å—Ç–æ—Ç—ã –Ω–∞ –±–æ—Ä—Ç—É
    cleanliness_quality: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ, –∫–∞–∫ —á–∏—Å—Ç–æ –±—ã–ª–æ –Ω–∞ –±–æ—Ä—Ç—É', MARKS
    )

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    checkin_service_quality: str = st.sidebar.selectbox(
        '–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', MARKS
    )

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç–º–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    # –ù–ï –ü–†–û–í–û–î–ò–¢–°–Ø. –û—Ü–µ–Ω–∫–∞ –¥–æ–≤–æ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    # –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –≤—ã—à–µ. –î–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–≤—è–∑–∫–∏:
    # —ç–º–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç–∑—ã–≤–∞ -> –∞–≤—Ç–æ—Ä -> —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞)
    user_comment: str = st.sidebar.text_area('–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    # –ö–Ω–æ–ø–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–∑—ã–≤–∞ -> –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
    if st.sidebar.button('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'):
        predict_status(np.array(
            [
                [
                    user_loyalty,
                    *get_binary_features(user_travel_type, ['Business']),
                    user_flight_distance,
                    *get_binary_features(
                        user_service_class, ['Business', 'Eco']
                    ),
                    *get_binary_features(
                        inflight_wifi_service, ['2', '3', '4', '5']
                    ),
                    *get_binary_features(
                        ticket_purchase_quality, ['5']
                    ),
                    *get_binary_features(
                        the_drink_and_food_quality, ['1']
                    ),
                    *get_binary_features(
                        the_quality_of_boarding_the_plane,
                        ['1', '2', '3', '4', '5']
                    ),
                    *get_binary_features(
                        seat_quality,
                        ['1', '2', '3', '4', '5']
                    ),
                    *get_binary_features(
                        quality_of_entertainment,
                        ['1', '2', '3', '4', '5']
                    ),
                    *get_binary_features(
                        quality_of_service_on_board,
                        ['1', '2', '4', '5']
                    ),
                    *get_binary_features(
                        leg_room_service_quality,
                        ['1', '2', '3', '4', '5']
                    ),
                    *get_binary_features(
                        baggage_handling_quality,
                        ['3', '5']
                    ),
                    *get_binary_features(
                        checkin_service_quality,
                        ['1', '2', '5']
                    ),
                    *get_binary_features(
                        quality_of_service_on_board,
                        ['3', '5']
                    ),
                    *get_binary_features(
                        cleanliness_quality,
                        ['1', '2', '5']
                    ),
                ]
            ]
        ), user_comment, user_name
        )


def get_binary_features(value: str, variants: list[str]) -> list[int]:
    """ –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ """
    return list(
        map(
            lambda x: value == x, variants
        )
    )


if __name__ == "__main__":
    start()
